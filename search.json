[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 preparedata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kennedy Mwavu. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mwavu K (2022). preparedata: Prepare Data Analysis Visualization. R package version 0.0.0.9000, https://github.com/kennedymwavu/preparedata.","code":"@Manual{,   title = {preparedata: Prepare Data For Analysis And Visualization},   author = {Kennedy Mwavu},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/kennedymwavu/preparedata}, }"},{"path":"/index.html","id":"preparedata","dir":"","previous_headings":"","what":"Prepare Data For Analysis And Visualization","title":"Prepare Data For Analysis And Visualization","text":"Functions make data preparation easier. Preparing data entails putting column row names () required format, dealing missing values, making sure column required type.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prepare Data For Analysis And Visualization","text":"can install development version preparedata GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kennedymwavu/preparedata\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Prepare Data For Analysis And Visualization","text":"fairly common task dealing strings need split string. base::strsplit() stringr::str_split() . Notice return value list length 1, first element holds character vector. Often, shape output inconvenient, ie. want unlisted version. ’s exactly preparedata::str_split_one() : Use str_split_one() input known single string. safety, error input length greater one. Error str_split_one(string = c(“,b”, “b,c”), pattern = “,”) : length(string) <= 1 TRUE str_split_one() built top stringr::str_split(), can use ’s n argument stringr’s general interface describing pattern matched.","code":"(x <- \"a, b, c\") #> [1] \"a, b, c\"  strsplit(x = x, split = \", \") #> [[1]] #> [1] \"a\" \"b\" \"c\"  stringr::str_split(string = x, pattern = \", \") #> [[1]] #> [1] \"a\" \"b\" \"c\" library(preparedata)  str_split_one(string = x, pattern = \", \") #> [1] \"a\" \"b\" \"c\" str_split_one(string = c(\"a,b\", \"b,c\"), pattern = \",\") (x <- \"a,b,c\") #> [1] \"a,b,c\" str_split_one(string = x, pattern = \",\", n = 2) #> [1] \"a\"   \"b,c\"  (y <- \"192.168.0.1\") #> [1] \"192.168.0.1\" str_split_one(string = y, pattern = stringr::fixed(\".\")) #> [1] \"192\" \"168\" \"0\"   \"1\""},{"path":"/reference/str_split_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string — str_split_one","title":"Split a string — str_split_one","text":"Split string","code":""},{"path":"/reference/str_split_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string — str_split_one","text":"","code":"str_split_one(string, pattern, n = Inf)"},{"path":"/reference/str_split_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string — str_split_one","text":"string character vector length 1. pattern Pattern look . default interpretation regular expression, described stringi::stringi-search-regex. Control options regex(). Match fixed string (.e. comparing bytes), using fixed(). fast, approximate. Generally, matching human text, want coll() respects character matching rules specified locale. Match character, word, line sentence boundaries boundary(). empty pattern, \"\", equivalent boundary(\"character\"). n number pieces return.  Default (Inf) uses possible split positions. str_split_fixed, n greater number pieces, result padded empty strings.","code":""},{"path":"/reference/str_split_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string — str_split_one","text":"character vector.","code":""},{"path":"/reference/str_split_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a string — str_split_one","text":"","code":"x <- \"alpha, omega, start, end\" str_split_one(string = x, pattern = \", \") #> [1] \"alpha\" \"omega\" \"start\" \"end\"    y <- \"192.168.0.1\" str_split_one(string = y, pattern = stringr::fixed(\".\")) #> [1] \"192\" \"168\" \"0\"   \"1\""}]
